<?php

use Drupal\Component\Utility\Html;

/**
 * @file
 * Functions to support theming in the noble theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function noble_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function noble_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function noble_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function noble_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function noble_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function noble_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $suggestions = array();
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle();
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id();
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

function noble_theme_suggestions_colorbox_formatter_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $item */
  $item = $variables['item'];
  /** @var \Drupal\taxonomy\TermInterface $entity */
  $entity = $variables['entity'];

  $suggestions[] = $variables['theme_hook_original'] . '__' . $item->getFieldDefinition()->getName();
  $suggestions[] = $variables['theme_hook_original'] . '__' . $item->getFieldDefinition()->getName() . '__' . $entity->bundle();
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 */
function noble_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, array('block__bundle__' . $variables['elements']['content']['#block_content']->bundle(), 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle() . '__' . $variables['elements']['content']['#view_mode']));
  }
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function noble_preprocess_block(array &$variables) {
  // Create an HTML class based on the block ID.
  if (!empty($variables['elements']['#id'])) {
    $variables['machine_name'] = Html::cleanCssIdentifier($variables['elements']['#id']);
  }
  elseif (!empty($variables['elements']['#derivative_plugin_id'])) {
    $variables['machine_name'] = $variables['elements']['#derivative_plugin_id'];
  }

  // Add custom expandable menu functionality for about menu.
  if (isset($variables['machine_name']) && $variables['machine_name'] == 'about') {
    $variables['attributes']['class'][] = 'menu--expandable';
  }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function noble_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function noble_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function noble_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function noble_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function noble_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function noble_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function noble_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function noble_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function noble_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function noble_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

/**
 * Implements hook_preprocess_menu().
 */
function noble_preprocess_menu(array &$variables) {
  foreach ($variables['items'] as $key => &$item) {

    // Create a class for each menu item based on the link item's key.
    // Items of type Menu Config Link have keys with a colon to separate the
    // bundle from the entity id, so we can special case this and use the
    // machine name of the link as it is exported to code.
    $class = $key;
    if (substr_count($key, ':') === 1) {
      list($bundle, $class) = explode(':', $key);
    }
    $class = str_replace('_', '-', $class);

    // prepend 'menu-item--' to all classes, and if the class name starts with
    // 'icon-' then add that as another stand-alone class.
    if (strpos($class, 'icon-') !== FALSE) {
      $class = $class . ' menu-item--' . $class;
    } else {
      $class = 'menu-item--' . $class;
    }
    $variables['items'][$key]['attributes']->addClass($class);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for commerce_line_item_product_variation_add_to_cart_form().
 *
 * Adds some classy markup so these elements can be themed.
 */
function noble_form_commerce_line_item_product_variation_add_to_cart_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['actions']['submit']['#attributes'] = array('class' => array('add-to-cart-button'));
  $form['actions']['out_stock']['#prefix'] = '<span class="out-of-stock">';
  $form['actions']['out_stock']['#suffix'] = '</span>';
  $form['link']['#prefix'] = '<span class="find-in-store">';
  $form['link']['#suffix'] = '</span>';

  if($color = $form['purchased_entity']['widget'][0]['attributes']['attribute_color']) {
    $color['#title_display'] = 'invisible';
    $form['purchased_entity']['widget'][0]['attributes']['attribute_color'] = $color;
  }

  // Modify the size form to match the design.
  // Add an empty 'size' option as the first and default option.
  if($size = $form['purchased_entity']['widget'][0]['attributes']['attribute_size']) {
    $size['#title_display'] = 'invisible';
    $size['#options'] = array('' => $size['#title']) + $size['#options'];
    $size['#default_value'] = '';
    $form['purchased_entity']['widget'][0]['attributes']['attribute_size'] = $size;
  }
}
